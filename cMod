"""
mod: `cMod` -- Create Models
===========================================================
-- module:: cMod
   :platform: Windows
   :synopsis: creates a keras model from given input file.
-- moduleauthor:: Agustin Vallejo
  
Requirements::
    1.  You will need to pip install keras,
        pip install tensorflow, and pip install
        numpy to run this code.
        #include downloads for keras
        #for tensorflow
        #for numpy
    2.  You will need to follow the following
        text file format:
        [For tuples do NOT include the parenthesis,
        and do NOT separate with spaces, ONLY commas.
        Columns are separated with tabs.]
        type	featureMaps/Neurons/Filters/activation	kernelSize	inputShape	strides

        e.g.:
        Conv2D	20	3,3	1,28,28	2,2
        Activ	sigmoid
        Conv2D	10	2,2
        Activ	sigmoid
        Avg2DP	2,2
        Flatten
        Activ	sigmoid
        Dense	100
        Dense	10
    3.  The layer names are different for ease.
        Convolutional2D -> Conv2D
        Activation -> Activ
        AveragePooling2D -> Avg2DP
        Flatten -> Flatten
        Dense -> Dense
"""
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Activation
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers.convolutional import AveragePooling2D
from keras import backend as K
K.set_image_dim_ordering('th')

XTrain, yTrain, XTest, yTest, numClasses = load("mnist")

#ADD DROPOUT float()

#returns model from a text file of layers, has defaults to most common
def createModel(filename, lossF = 'categorical_crossentropy', opt = 'adam', met = ['accuracy']):
    model = Sequential()

    '''model.add(Conv2D(filters = 20, kernel_size = (3, 3), input_shape = (1, 28, 28), strides = (2, 2)))
    model.add(Activation('sigmoid'))
    model.add(Conv2D(filters = 10, kernel_size = (2, 2), strides = (1,1)))
    model.add(Activation('sigmoid'))
    model.add(AveragePooling2D(pool_size = (2, 2)))
    model.add(Flatten())
    model.add(Activation('sigmoid'))
    model.add(Dense(100))
    model.add(Dense(10))
    model.add(Activation('softmax'))
    '''
    
    conv = 0

    #place text file into list of lists
    with open(filename, 'r') as f:
        layers = []
        for line in f:
            cLine = []
            for word in line.split():
                cLine.append(word)
            layers.append(cLine)

    #add the layers based off the text file
    for layer in layers:
        layer = np.array(layer)
        
        if(layer[0] == 'Conv2D'):
            conv += 1
            #create tuple for the kernel size
            x,y = layer[2].split(",")
            kS = [int(x), int(y)]
            kS = tuple(kS)
            #print("Doing conv: " + str(conv))
            #if input shape already input
            if conv < 2:
                #create tuple for the input shape
                x,y,z = layer[3].split(",")
                iS = [int(x), int(y), int(z)]
                iS = tuple(iS)
            if len(layer) > 4 and conv == 1:
                x,y = layer[4].split(",")
                s = [int(x), int(y)]
                s = tuple(s)
                #print("Doing the filters, ks, is, strides")
                model.add(Conv2D(filters=int(layer[1]),kernel_size=kS,input_shape=iS, strides=s))
                continue
            if conv > 1 and len(layer) > 3:
                x,y = layer[3].split(",")
                s = [int(x), int(y)]
                s = tuple(s)
                #print("Doing the filters, ks, strides")
                model.add(Conv2D(filters=int(layer[1]),kernel_size=kS, strides=s))
                continue
            #print("Doing the filters, ks")
            model.add(Conv2D(filters=int(layer[1]),kernel_size=kS))
        elif(layer[0] == 'Activ'):
            model.add(Activation(layer[1]))
        elif(layer[0] == 'Avg2DP'):
            #create tuple for poolsize
            x,y = layer[1].split(",")
            pS = [int(x), int(y)]
            pS = tuple(pS)
            model.add(AveragePooling2D(pool_size=pS))
        elif(layer[0] == 'Flatten'):
            model.add(Flatten())
        elif(layer[0] == 'Dense'):
            model.add(Dense(int(layer[1])))
        else:
            print("[ERROR] Add functionality for: {s}".format(layer[0]))
    model.compile(loss = lossF, optimizer = opt, metrics = met)

    return model
    
model = createModel(filename='myM.txt')
epochs = 1

print(model.summary())

#fit model and print results
model.fit(XTrain, yTrain, validation_data = (XTest, yTest), epochs = epochs, batch_size = 200)
score = model.evaluate(XTest, yTest, verbose = 0)
print("ACCURACY: %.2f%%" % (score[1] * 100))

#SAVE AND LOAD?
